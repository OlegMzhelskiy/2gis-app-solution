// Code generated by MockGen. DO NOT EDIT.
// Source: booking.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "applicationDesignTest/internal/domain"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockhotelRepository is a mock of hotelRepository interface.
type MockhotelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockhotelRepositoryMockRecorder
}

// MockhotelRepositoryMockRecorder is the mock recorder for MockhotelRepository.
type MockhotelRepositoryMockRecorder struct {
	mock *MockhotelRepository
}

// NewMockhotelRepository creates a new mock instance.
func NewMockhotelRepository(ctrl *gomock.Controller) *MockhotelRepository {
	mock := &MockhotelRepository{ctrl: ctrl}
	mock.recorder = &MockhotelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhotelRepository) EXPECT() *MockhotelRepositoryMockRecorder {
	return m.recorder
}

// AddRoomAvailability mocks base method.
func (m *MockhotelRepository) AddRoomAvailability(hotelID domain.HotelID, roomType domain.RoomType, date time.Time, rooms int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRoomAvailability", hotelID, roomType, date, rooms)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRoomAvailability indicates an expected call of AddRoomAvailability.
func (mr *MockhotelRepositoryMockRecorder) AddRoomAvailability(hotelID, roomType, date, rooms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRoomAvailability", reflect.TypeOf((*MockhotelRepository)(nil).AddRoomAvailability), hotelID, roomType, date, rooms)
}

// Reserve mocks base method.
func (m *MockhotelRepository) Reserve(bookings []domain.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reserve", bookings)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reserve indicates an expected call of Reserve.
func (mr *MockhotelRepositoryMockRecorder) Reserve(bookings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reserve", reflect.TypeOf((*MockhotelRepository)(nil).Reserve), bookings)
}

// MockorderService is a mock of orderService interface.
type MockorderService struct {
	ctrl     *gomock.Controller
	recorder *MockorderServiceMockRecorder
}

// MockorderServiceMockRecorder is the mock recorder for MockorderService.
type MockorderServiceMockRecorder struct {
	mock *MockorderService
}

// NewMockorderService creates a new mock instance.
func NewMockorderService(ctrl *gomock.Controller) *MockorderService {
	mock := &MockorderService{ctrl: ctrl}
	mock.recorder = &MockorderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockorderService) EXPECT() *MockorderServiceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockorderService) AddOrder(order domain.Order) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", order)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockorderServiceMockRecorder) AddOrder(order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockorderService)(nil).AddOrder), order)
}

// GetOrderByID mocks base method.
func (m *MockorderService) GetOrderByID(id domain.OrderID) (*domain.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", id)
	ret0, _ := ret[0].(*domain.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockorderServiceMockRecorder) GetOrderByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockorderService)(nil).GetOrderByID), id)
}
